name: Django CI/CD with Render

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: productmanagement_db
          POSTGRES_USER: productmanagement_db_user
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DEBUG: 'False'
      USE_POSTGRES: 'True'
      POSTGRES_DB: productmanagement_db
      POSTGRES_USER: productmanagement_db_user
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: '5432'
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: 'localhost,127.0.0.1'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U productmanagement_db_user; do
            sleep 2
          done

      - name: Run migrations and tests
        run: |
          python manage.py makemigrations --verbosity=2
          python manage.py migrate --verbosity=2
          python manage.py test --verbosity=2

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute Build Commands on Render
        env:
          # Variables de Render (producci√≥n)
          DEBUG: 'False'
          USE_POSTGRES: 'True'
          POSTGRES_DB: ${{ secrets.RENDER_POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.RENDER_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.RENDER_POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.RENDER_POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.RENDER_POSTGRES_PORT }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
        run: |
          echo "üöÄ Executing build commands on Render database..."
          echo "üìã Making migrations..."
          python manage.py makemigrations --verbosity=2
          echo "üìã Running migrations..."
          python manage.py migrate --verbosity=2
          echo "üìÇ Loading initial data..."
          if [ -f "fixtures/inicial.json" ]; then
            python manage.py loaddata fixtures/inicial.json --verbosity=2
            echo "‚úÖ Fixtures loaded successfully"
          else
            echo "‚ö†Ô∏è No fixture file found at fixtures/inicial.json - skipping"
          fi
          echo "üìÅ Collecting static files..."
          python manage.py collectstatic --noinput --verbosity=2
          echo "‚úÖ Build commands completed!"

      - name: Trigger Render Deploy (optional)
        run: |
          echo "üîÑ Triggering Render redeploy..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}" || echo "Deploy hook not configured"