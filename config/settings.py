# config/settings.py

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


# from decouple import config, Csv
# import environ
import os
import sys
from pathlib import Path
import logging

from dotenv import load_dotenv
# Cargar las variables de entorno desde el archivo .env
load_dotenv()


TU_WALLET_SEPOLIA = os.getenv("TU_WALLET_SEPOLIA", None)
ALCHEMY_END_POINT_SEPOLIA = os.getenv("ALCHEMY_END_POINT_SEPOLIA", None)



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# 1) Cargar siempre .env primero
load_dotenv(BASE_DIR / ".env")

# 2) Si USE_LOCAL_ENV=True, sobreescribe con .env.local
if os.getenv("USE_LOCAL_ENV", "False").lower() == "true":
    load_dotenv(BASE_DIR / ".env.local", override=True)


LOGGING = {
    'version': 1,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose',
        },
    },
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s] %(message)s'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-default-key')


# Retrieves the DEBUG setting from environment variables using decouple.
# Defaults to False and ensures the value is cast as a boolean.
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 'yes')


ALLOWED_HOSTS = [
    h.strip() for h in os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",") if h.strip()
]


CSRF_TRUSTED_ORIGINS = [
    origin.strip() for origin in os.getenv("CSRF_TRUSTED_ORIGINS", "").split(",") if origin.strip()
]


# Recomendado en HTTPS
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'modeltranslation',
    'core',
    'products.apps.ProductsConfig',
    'orders',
    'cart',
    'payments',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Middleware to detect and use the user's browser language preference, Internationalization (i18n)
    'django.middleware.locale.LocaleMiddleware',

]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Custom context processors
                'core.context_processors.global_categories',
                "cart.context_processors.cart_summary",

                'django.template.context_processors.static',
                'django.template.context_processors.tz',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Determines whether to use PostgreSQL instead of the default SQLite database.
# The value is read from environment variables and cast to a boolean.
USE_POSTGRES = os.getenv("USE_POSTGRES", "False").lower() == "true"
# If USE_POSTGRES is True, configure the database to use PostgreSQL with environment-based credentials.
# Otherwise, fall back to using the default local SQLite database.


if USE_POSTGRES:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB", os.getenv("DATABASE_NAME", "myappDB")),
            "USER": os.getenv("POSTGRES_USER", os.getenv("DATABASE_USER", "myDBuser")),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD", os.getenv("DATABASE_PASSWORD", "")),
            "HOST": os.getenv("POSTGRES_HOST", os.getenv("DATABASE_HOST", "db")),
            "PORT": os.getenv("POSTGRES_PORT", os.getenv("DATABASE_PORT", "5432")),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

logging.warning(
    "DB → host=%s port=%s db=%s user=%s",
    os.getenv("POSTGRES_HOST", os.getenv("DATABASE_HOST")),
    os.getenv("POSTGRES_PORT", os.getenv("DATABASE_PORT")),
    os.getenv("POSTGRES_DB", os.getenv("DATABASE_NAME")),
    os.getenv("POSTGRES_USER", os.getenv("DATABASE_USER")),
)

# Specifies the custom user model to be used throughout the application in place of Django's default User model
AUTH_USER_MODEL = 'users.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-en'

USE_I18N = True  # Internationalization activated
USE_L10N = True  # Localization activated

LANGUAGES = (
    ('en', 'English'),
    ('es', 'Spanish'),
)

TIME_ZONE = 'UTC'
USE_TZ = True


# Carpeta donde se guardarán los archivos .po y .mo
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Used for project-wide static assets, served via STATICFILES_DIRS during development.
# Static files are served from STATICFILES_DIRS (in dev) and collected with collectstatic (in prod).
# Place custom assets (logo images, JS, CSS) inside the `static/` folder at project root.

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (user-uploaded content)
# These are files uploaded through ImageField/FileField, like product images.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# Specifies the default primary key type for models as BigAutoField and configures WhiteNoise for serving static files
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Configures WhiteNoise for compressing and serving static files with manifest caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'





CRYPTO_NETWORKS = {
    "sepolia": {
        "symbol": "ETH",
        "chain_id": 11155111,
        "decimals": 18,
        "receiving_address": TU_WALLET_SEPOLIA,
        "rpc_url": ALCHEMY_END_POINT_SEPOLIA,
    },
}
CRYPTO_PRICE_BUFFER_PCT = 0.015
CRYPTO_QUOTE_TTL_SECONDS = 180
PAYMENT_VERIFY_TIMEOUT = 90   # segundos máximos esperando
PAYMENT_VERIFY_POLL    = 3    # cada cuántos segundos reintentar
