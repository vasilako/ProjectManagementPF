# config/settings.py

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import sys
from pathlib import Path
from decouple import config
config('TU_WALLET_SEPOLIA', default=None)
TU_WALLET_SEPOLIA = config('TU_WALLET_SEPOLIA', default=None)
ALCHEMY_END_POINT_SEPOLIA = config('ALCHEMY_END_POINT_SEPOLIA', default=None)
# TU_WALLET_SEPOLIA = os.getenv("TU_WALLET_SEPOLIA")
# ALCHEMY_END_POINT_SEPOLIA = os.getenv("ALCHEMY_END_POINT_SEPOLIA")


import logging



LOGGING = {
    'version': 1,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose',
        },
    },
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s] %(message)s'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-default-key')


# Retrieves the DEBUG setting from environment variables using decouple.
# Defaults to False and ensures the value is cast as a boolean.
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config(
    'ALLOWED_HOSTS',
    default='localhost,127.0.0.1',
    cast=lambda v: [s.strip() for s in v.split(',')]
)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'modeltranslation',
    'core',
    'products.apps.ProductsConfig',
    'orders',
    'cart',
    'payments',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Middleware to detect and use the user's browser language preference, Internationalization (i18n)
    'django.middleware.locale.LocaleMiddleware',

]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Custom context processors
                'core.context_processors.global_categories',
                "cart.context_processors.cart_summary",

                'django.template.context_processors.static',
                'django.template.context_processors.tz',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Determines whether to use PostgreSQL instead of the default SQLite database.
# The value is read from environment variables and cast to a boolean.
USE_POSTGRES = config('USE_POSTGRES', default=False, cast=bool)

# If USE_POSTGRES is True, configure the database to use PostgreSQL with environment-based credentials.
# Otherwise, fall back to using the default local SQLite database.
if USE_POSTGRES:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('POSTGRES_DB'),
            'USER': config('POSTGRES_USER'),
            'PASSWORD': config('POSTGRES_PASSWORD'),
            'HOST': config('POSTGRES_HOST', default='db'),
            'PORT': config('POSTGRES_PORT', default='5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Specifies the custom user model to be used throughout the application in place of Django's default User model
AUTH_USER_MODEL = 'users.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-en'

USE_I18N = True  # Internationalization activated
USE_L10N = True  # Localization activated

LANGUAGES = (
    ('en', 'English'),
    ('es', 'Spanish'),
)

TIME_ZONE = 'UTC'
USE_TZ = True

BASE_DIR = Path(__file__).resolve().parent.parent
LOCALE_PATHS = [
    BASE_DIR / 'locale',  # Carpeta donde se guardarán los archivos .po y .mo
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Used for project-wide static assets, served via STATICFILES_DIRS during development.
# Static files are served from STATICFILES_DIRS (in dev) and collected with collectstatic (in prod).
# Place custom assets (logo images, JS, CSS) inside the `static/` folder at project root.

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (user-uploaded content)
# These are files uploaded through ImageField/FileField, like product images.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# Specifies the default primary key type for models as BigAutoField and configures WhiteNoise for serving static files
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Configures WhiteNoise for compressing and serving static files with manifest caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='')


CRYPTO_NETWORKS = {
    "sepolia": {
        "symbol": "ETH",
        "chain_id": 11155111,
        "decimals": 18,
        "receiving_address": TU_WALLET_SEPOLIA,
        "rpc_url": ALCHEMY_END_POINT_SEPOLIA,
    },
}
CRYPTO_PRICE_BUFFER_PCT = 0.015
CRYPTO_QUOTE_TTL_SECONDS = 180
PAYMENT_VERIFY_TIMEOUT = 90   # segundos máximos esperando
PAYMENT_VERIFY_POLL    = 3    # cada cuántos segundos reintentar
